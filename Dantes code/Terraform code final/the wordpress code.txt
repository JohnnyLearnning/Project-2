#designate provider
provider "aws" { 
  region =  "us-east-1"
  profile =  "ck"
}

#create local tags
locals {
 tags = {
    project = var.project
    createdBy = "team4"
    CreatedOn = timestamp()
    Environment = terraform.workspace
  }
}

#create VPC
resource "aws_vpc" "vpc"{
cidr_block = var.vpc_cidr
instance_tenancy = "default"
enable_dns_support = true
enable_dns_hostnames = true
tags = merge({ "Name" = "${var.project}-vpc"}, local.tags)
}

# Creating public subnet 1
resource "aws_subnet" "project-2-public-subnet" {
  vpc_id                  = aws_vpc.vpc.id
  cidr_block             = var.subnet_cidr
  map_public_ip_on_launch = true
  availability_zone = "us-east-1a"
tags = merge({ "Name" = "${var.project}-public-subnet"}, local.tags)
}

# Creating az2 public subnet 2 
resource "aws_subnet" "project-2-public-subnet1" {
  vpc_id                  = aws_vpc.vpc.id
  cidr_block             = var.subnet1_cidr
  map_public_ip_on_launch = true
  availability_zone = "us-east-1b"
tags = merge({ "Name" = "${var.project}-public-subnet1"}, local.tags)
}

# Creating private subnet 1
resource "aws_subnet" "project-2-private-subnet" {
  vpc_id                  = aws_vpc.vpc.id
  cidr_block             = var.subnet2_cidr
  map_public_ip_on_launch = false
  availability_zone = "us-east-1a"
  tags = merge({ "Name" = "${var.project}-private-subnet"}, local.tags)
}

# Creating az2 private subnet 2 
resource "aws_subnet" "project-2-private-subnet1" {
  vpc_id                  = aws_vpc.vpc.id
  cidr_block             = var.subnet3_cidr
  map_public_ip_on_launch = false
  availability_zone = "us-east-1b"
  tags = merge({ "Name" = "${var.project}-private-subnet1"}, local.tags)
}

# Creating private subnet 3
resource "aws_subnet" "project-2-db-subnet" {
  vpc_id                  = aws_vpc.vpc.id
  cidr_block             = var.subnet4_cidr
  map_public_ip_on_launch = false
  availability_zone = "us-east-1a"
  tags = merge({ "Name" = "${var.project}-db-subnet"}, local.tags)
}

# Creating az2 private subnet 4
resource "aws_subnet" "project-2-db-subnet1" {
  vpc_id                  = aws_vpc.vpc.id
  cidr_block             = var.subnet5_cidr
  map_public_ip_on_launch = false
  availability_zone = "us-east-1b"
  tags = merge({ "Name" = "${var.project}-db-subnet1"}, local.tags)
}

# Creating IGW
resource "aws_internet_gateway" "project-2-igw" {
  vpc_id = "${aws_vpc.vpc.id}"
  tags = merge({ "Name" = "${var.project}-igw"}, local.tags)
}

# Creating Elastic IP
resource "aws_eip" "nat_eip" {
    depends_on = [aws_internet_gateway.project-2-igw ]
    tags = merge({ "Name" = "${var.project}-eip"}, local.tags)
}

# Creating Elastic IP 2
resource "aws_eip" "nat_eip_1" {
    depends_on = [aws_internet_gateway.project-2-igw ]
    tags = merge({ "Name" = "${var.project}-eip"}, local.tags)
}

# Creating NAT
resource "aws_nat_gateway" "project-2-nat" {
    allocation_id =  aws_eip.nat_eip.id
    subnet_id = aws_subnet.project-2-public-subnet.id
  tags = merge({ "Name" = "${var.project}-nat"}, local.tags)
}

# Creating NAT 2
resource "aws_nat_gateway" "project-2-nat-1" {
    allocation_id =  aws_eip.nat_eip_1.id
    subnet_id = aws_subnet.project-2-public-subnet1.id
  tags = merge({ "Name" = "${var.project}-nat-1"}, local.tags)
}

#Creating Public Route Table
resource "aws_route_table" "project-2-public-rt" {
    vpc_id = "${aws_vpc.vpc.id}"
route {
        cidr_block = "0.0.0.0/0"
        gateway_id = aws_internet_gateway.project-2-igw.id
    }
  tags = merge({ "Name" = "${var.project}-public-rt"}, local.tags)
}

resource "aws_route_table_association" "project-2-rt1-public" {
    subnet_id = aws_subnet.project-2-public-subnet.id
    route_table_id = aws_route_table.project-2-public-rt.id
}

resource "aws_route_table_association" "project-2-rt2-public" {
    subnet_id = aws_subnet.project-2-public-subnet1.id
    route_table_id = aws_route_table.project-2-public-rt.id
}

#Creating Private Route Table
resource "aws_route_table" "project-2-private-rt" {
    vpc_id = aws_vpc.vpc.id
route {
        cidr_block = "0.0.0.0/0"
        gateway_id = aws_nat_gateway.project-2-nat.id
    }
  tags = merge({ "Name" = "${var.project}-private-rt"}, local.tags)
}
resource "aws_route_table_association" "rt-private" {
    subnet_id = aws_subnet.project-2-private-subnet.id
    route_table_id = aws_route_table.project-2-private-rt.id
}

resource "aws_route_table_association" "rt-private1" {
    subnet_id = aws_subnet.project-2-db-subnet.id
    route_table_id = aws_route_table.project-2-private-rt.id
}

#Creating Private Route Table 2
resource "aws_route_table" "project-2-private-rt-1" {
    vpc_id = aws_vpc.vpc.id
route {
        cidr_block = "0.0.0.0/0"
        gateway_id = aws_nat_gateway.project-2-nat-1.id
    }
  tags = merge({ "Name" = "${var.project}-private-rt-1"}, local.tags)
}

resource "aws_route_table_association" "rt2-private" {
    subnet_id = aws_subnet.project-2-private-subnet1.id
    route_table_id = aws_route_table.project-2-private-rt-1.id
}

resource "aws_route_table_association" "rt2-private-1" {
    subnet_id = aws_subnet.project-2-db-subnet1.id
    route_table_id = aws_route_table.project-2-private-rt-1.id
}

#creating efs
resource "aws_efs_file_system" "team4_efs" {
   creation_token = "team4_efs"
   performance_mode = "generalPurpose"
   throughput_mode = "bursting"
   encrypted = "false"
  tags = merge({ "Name" = "${var.project}-efs"}, local.tags)
 }

output "efs_id" {
  value = aws_efs_file_system.team4_efs.id
}

resource "aws_db_subnet_group" "team-4-db-subnet-group" {
  name  = "team-4-db-subnet-group"
  subnet_ids = [aws_subnet.project-2-db-subnet.id, aws_subnet.project-2-db-subnet1.id]
  tags = merge({ "Name" = "${var.project}-db-subnetgroup"}, local.tags)
}

#creating efs mount target in public subnet 1
resource "aws_efs_mount_target" "efs-mt" {
   file_system_id  = aws_efs_file_system.team4_efs.id
   subnet_id = aws_subnet.project-2-private-subnet.id
   security_groups = [aws_security_group.project-2-efs.id]
 }

#creating efs mount target in public subnet 2
 resource "aws_efs_mount_target" "efs-mt2" {
   file_system_id  = aws_efs_file_system.team4_efs.id
   subnet_id = aws_subnet.project-2-private-subnet1.id
   security_groups = [aws_security_group.project-2-efs.id]
 }


# Creating Security Group for efs
resource "aws_security_group" "project-2-efs" {
  name        = "${var.project}-efs-sg"
  description = "Allow inbound EFS traffic from EC2"
  vpc_id      = aws_vpc.vpc.id
  depends_on = [aws_security_group.load-balancer-sg, aws_security_group.asg-sg]
  ingress {
    description = "nfs from asg"
    security_groups = [aws_security_group.asg-sg.id]
    from_port       = 2049
    to_port         = 2049
    protocol        = "TCP"
  }
  ingress {
    description     = "HTTP from VPC"
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.load-balancer-sg.id]
  }
  egress {
    from_port       = 0
    to_port         = 0
    cidr_blocks      = ["0.0.0.0/0"]
    protocol        = "-1"
  }

  tags = merge({ "Name" = "${var.project}-efs-sg" }, local.tags)
}

# Creating Security Group for db
resource "aws_security_group" "project-2-db-sg" {
  name        = "${var.project}-db-sg"
  description = "Allow inbound db traffic from EC2"
    vpc_id      = aws_vpc.vpc.id

  ingress {
    description = "mysql from db"
    security_groups = [aws_security_group.asg-sg.id]
    from_port       = 3306
    to_port         = 3306
    protocol        = "TCP"
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  tags = merge({ "Name" = "${var.project}-db-sg" }, local.tags)
}


# Creating Security Group for ELB
resource "aws_security_group" "load-balancer-sg" {
  name        = "${var.project}-elb-sg"
  vpc_id      = aws_vpc.vpc.id
# Inbound Rules
  # HTTP from anywhere
  ingress {
    description = "http from anywhere"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

# Outbound Rules
  # Internet access to anywhere
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
    tags = merge({ "Name" = "${var.project}-elb-sg"}, local.tags)
}

# Creating Security Group for asg ec2 instances
resource "aws_security_group" "asg-sg" {
  name        = "${var.project}-asg-sg"
  description = "Allow HTTP  inbound traffic from Load Balancer"
  vpc_id      = aws_vpc.vpc.id

  ingress {
    description      = "http from ELB"
    from_port        = 80
    to_port          = 80
    protocol         = "TCP"
    security_groups      = [aws_security_group.load-balancer-sg.id]
  }
  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  tags = merge({ "Name" = "${var.project}-asg-sg"}, local.tags)
}

# Creating Load Balancer
resource "aws_lb" "load-balancer" {
  name               = "${var.project}-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.load-balancer-sg.id]
  subnets            = [aws_subnet.project-2-public-subnet.id, aws_subnet.project-2-public-subnet1.id]
  tags = merge({ "Name" = "${var.project}-lb"}, local.tags)
}

#create target group
resource "aws_lb_target_group" "target-group" {
    name = "${var.project}-tg"
    target_type = "instance"
    port = 80
    protocol = "HTTP"
    vpc_id = aws_vpc.vpc.id
    
    health_check {
    enabled = true
    interval = 300
    path = "/wp-login.php"
    timeout = 60
    matcher = 200
    healthy_threshold = 5
    unhealthy_threshold = 5
    }
    lifecycle {
    create_before_destroy = true
    }
    tags = merge({ "Name" = "${var.project}-rg"}, local.tags)
}

resource "aws_dynamodb_table" "team-4-project-2-table" {
  name            = "team-4-project-2-table"
  billing_mode    = "PROVISIONED"
  read_capacity   = 1
  write_capacity  = 1
  hash_key        = "user"
  range_key       = "comment"
  attribute {
    name = "user"
    type = "S"
  }
  attribute {
    name = "comment"
    type = "S"
  }
  tags = merge({ "Name" = "${var.project}-dynamo-db" }, local.tags)

  # Add this block for Expression Attribute Names
  global_secondary_index {
    name               = "user-comment-index"
    projection_type   = "ALL"
    read_capacity     = 1
    write_capacity    = 1
    hash_key          = "user"
    range_key         = "comment"
  }
}

#create serverless aurora
resource "aws_rds_cluster" "team4auroracluster" {
  cluster_identifier = "team4auroracluster"
  engine             = "aurora-mysql"
  engine_mode        = "provisioned"
  engine_version     = "8.0.mysql_aurora.3.02.0"
  database_name      = "${var.DatabaseName}"
  master_username    = "${var.DatabaseUsername}"
  master_password    = "${var.DatabasePassword}"
  db_subnet_group_name = aws_db_subnet_group.team-4-db-subnet-group.name
  skip_final_snapshot  = true
  vpc_security_group_ids = [aws_security_group.project-2-db-sg.id]
  serverlessv2_scaling_configuration {
    max_capacity = 1.0
    min_capacity = 0.5
  }
      tags = merge({ "Name" = "${var.project}-rg"}, local.tags)
}

resource "aws_rds_cluster_instance" "writer-instance" {
  cluster_identifier = aws_rds_cluster.team4auroracluster.id
  instance_class     = "db.serverless"
  engine             = aws_rds_cluster.team4auroracluster.engine
  engine_version     = aws_rds_cluster.team4auroracluster.engine_version
  publicly_accessible = false
  promotion_tier      = 1
  availability_zone   = "us-east-1b" 
}

resource "aws_rds_cluster_instance" "reader-instance" {
  cluster_identifier = aws_rds_cluster.team4auroracluster.id
  instance_class     = "db.serverless"
  engine             = aws_rds_cluster.team4auroracluster.engine
  engine_version     = aws_rds_cluster.team4auroracluster.engine_version
  publicly_accessible = false
  promotion_tier      = 0
  availability_zone   = "us-east-1a" 
}

data "template_file" "init_script" {
  template = file("${path.module}/init.sh")

  vars = {
    DatabaseName        = var.DatabaseName
    DatabaseHostName    = var.DatabaseHostName
    DatabaseUsername    = var.DatabaseUsername
    DatabasePassword    = var.DatabasePassword
    Username            = var.Username
    Password            = var.Password
    Email               = var.Email
    ALBDNSName          = var.ALBDNSName
    region              = var.region
    efs_id              = aws_efs_file_system.team4_efs.id
    }
}

# Creating Launch Template
resource "aws_launch_template" "team4-project-2-lt" {
    iam_instance_profile {
        arn = var.iam_arn
    }
    name = "${var.project}-tpl"
    image_id = var.image_id
    instance_type = var.instance_type
    instance_market_options {
    market_type = "spot"
    }
    vpc_security_group_ids  = [ aws_security_group.asg-sg.id ]
    user_data = base64encode(data.template_file.init_script.rendered)
    key_name = "${var.key_name}"
    monitoring {
    enabled = true
    }
    metadata_options {
    http_endpoint               = "enabled"
    http_tokens                 = "optional"
    instance_metadata_tags      = "enabled"
    http_put_response_hop_limit = 2
    }
    tags = merge({ "Name" = "${var.project}-lt"}, local.tags)
}

resource "aws_lb_listener" "lb-listener" {
    load_balancer_arn = aws_lb.load-balancer.arn
    port              = "80"
    protocol          = "HTTP"
    default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.target-group.arn
    }
    tags = merge({ "Name" = "${var.project}-listener"}, local.tags)
}

# Creating Auto Scailing Group
resource "aws_autoscaling_group" "auto-scale-group" {
    name = "${var.project}-asg"
    max_size = var.max_size
    min_size = var.min_size
    desired_capacity = var.desired_capacity
    health_check_grace_period = 300
    health_check_type = "ELB"
    target_group_arns =  [aws_lb_target_group.target-group.arn]
    vpc_zone_identifier = [aws_subnet.project-2-private-subnet.id,aws_subnet.project-2-private-subnet1.id]
    launch_template {
    id = aws_launch_template.team4-project-2-lt.id
    version = aws_launch_template.team4-project-2-lt.latest_version
    }
    tag {
    key                 = "Name"
    value               = "team-4-project-2-ec2"
    propagate_at_launch = true
    }
}

#scale up policy
resource "aws_autoscaling_policy" "scale-up" {
    name = "${var.project}-scale-up-policy"
    autoscaling_group_name = aws_autoscaling_group.auto-scale-group.name
    adjustment_type = "ChangeInCapacity"
    scaling_adjustment = "1"
    cooldown = "300"
    policy_type = "SimpleScaling"
}

#Scale up alarm
resource "aws_cloudwatch_metric_alarm" "sacle-up-alarm" {
    alarm_name = "${var.project}-scale-up-alarm"
    alarm_description = "asg-scale-up-cpu-alarm"
    comparison_operator = "GreaterThanOrEqualToThreshold"
    evaluation_periods = "2"
    metric_name = "CPUUtilization"
    namespace = "AWS/EC2"
    period = "120"
    statistic = "Average"
    threshold = "80"
    dimensions = {
    "AutoScailingGroupName" = aws_autoscaling_group.auto-scale-group.name
    }
    actions_enabled = true
    alarm_actions = [aws_autoscaling_policy.scale-up.arn]
}

#scale down policy
resource "aws_autoscaling_policy" "scale-down" {
    name = "${var.project}-scale-down-policy"
    autoscaling_group_name = aws_autoscaling_group.auto-scale-group.name
    adjustment_type = "ChangeInCapacity"
    scaling_adjustment = "-1"
    cooldown = "300"
    policy_type = "SimpleScaling"
}

#Scale down alarm
resource "aws_cloudwatch_metric_alarm" "sacle-down-alarm" {
    alarm_name = "${var.project}-scale-down-alarm"
    alarm_description = "asg-scale-down-cpu-alarm"
    comparison_operator = "LessThanOrEqualToThreshold"
    evaluation_periods = "2"
    metric_name = "CPUUtilization"
    namespace = "AWS/EC2"
    period = "120"
    statistic = "Average"
    threshold = "30"
    dimensions = {
    "AutoScailingGroupName" = aws_autoscaling_group.auto-scale-group.name
    }
    actions_enabled = true
    alarm_actions = [aws_autoscaling_policy.scale-down.arn]
}